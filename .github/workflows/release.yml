name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'v[0-9]+.[0-9]+.[0-9]+-*'
    branches:
      - release-test

jobs:
  prepare:
    name: Prepare a release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
      - name: Get tag message
        id: tag
        run: echo "::set-output name=message::$(git tag -l --format='%(contents)' '${{ github.ref }}' | tail -n +3 | sed -n '/^-----BEGIN PGP SIGNATURE-----$/q;p')"
      - name: Create a GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Version ${{ github.ref }}
          body: ${{ steps.tag.outputs.message }}
          draft: true

  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        target:
          # - x86_64-unknown-linux-musl
          - armv7-unknown-linux-gnueabihf
          # - x86_64-apple-darwin
          # - x86_64-pc-windows-msvc
          # - x86_64-unknown-freebsd
        include:
          # - target: x86_64-unknown-linux-musl
          #   os: ubuntu-latest
          - target: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            use_cross: true
          # - target: x86_64-apple-darwin
          #   os: macos-latest
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
          # - target: x86_64-unknown-freebsd
          #   os: ubuntu-latest
          #   use_cross: true
    steps:
      - uses: actions/checkout@v2
      - name: Install packages (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install libsqlite3-dev
      - name: Install packages (x86_64-unknown-linux-musl)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get install musl-tools
      - name: Install packages (Windows)
        if: runner.os == 'Windows'
        run: vcpkg install sqlite3:x64-windows
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          profile: minimal
        id: toolchain
      - name: Install `cross`
        if: matrix.use_cross
        uses: actions-rs/install@v0.1
        with:
          crate: cross
          use-tool-cache: true
      - run: echo "::set-env name=SQLITE3_LIB_DIR::${Env:VCPKG_INSTALLATION_ROOT}\installed\x64-windows\lib"
        if: runner.os == 'Windows'
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          # args: --verbose --bin pipitor --release --target '${{ matrix.target }}' --no-default-features --features=rustls
          args: --verbose --bin pipitor --target '${{ matrix.target }}' --no-default-features --features=rustls
          use-cross: ${{ matrix.use_cross }}
        # env:
        #   CC_x86_64_unknown_linux_musl: x86_64-linux-musl-gcc
        #   RUSTFLAGS: -C codegen-units=1 -C linker-plugin-lto
      - name: Archive the binary
        run: |
          TAG=$(echo '${{ github.ref }}' | sed 's/^refs\/tags\///')
          NAME="pipitor-$TAG-${{ matrix.target }}"
          if [ '${{ runner.os }}' = Windows ]; then
            ASSET_NAME=$NAME.zip
            MIME=application/zip
            # ln 'target/${{ matrix.target }}/release/pipitor.exe' .
            cp 'target/${{ matrix.target }}/debug/pipitor.exe' .
            7z a $ASSET_NAME pipitor.exe
          else
            ASSET_NAME=$NAME.gz
            MIME=application/gzip
            # ln 'target/${{ matrix.target }}/release/pipitor' .
            cp 'target/${{ matrix.target }}/debug/pipitor' .
            tar -czf $ASSET_NAME pipitor
          fi
          echo "::set-env name=ASSET_NAME::$ASSET_NAME"
          echo "::set-env name=MIME::$MIME"
        shell: bash
      - name: Upload the archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare.outputs.upload_url }}
          asset_path: ${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: ${{ env.MIME }}
